unit WebService_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by RemObjects SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID = '{9A66726E-3694-4CED-9E2D-F7F0DCCB034D}';
const TargetNamespace = 'WebService';
const IWebService_IID: TGUID = '{BCD2965A-8FAF-4A4A-9FCE-4EFE2F163858}';
const WebService_EndPointURI = 'http://10.1.104.224:40284/soap/';
type
  { Forward declarations }
  IWebService = interface;
  IWebService_Async = interface;
  IWebService_AsyncEx = interface;
  WideString_Anonymous = class;
  WideString_AnonymousCollection = class;
  CoWebService = class;
  CoWebService_Async = class;
  CoWebService_AsyncEx = class;
  TWebService_Proxy = class;
  TWebService_AsyncProxy = class;
  TWebService_AsyncProxyEx = class;

  WideString_Anonymous = class(TROComplexType)
  private
    fValue: UnicodeString;
  public
    class function GetAttributeCount: Integer; override; 
    class function GetAttributeName(aIndex: Integer): String; override; 
    class function GetAttributeValue(aIndex: Integer): String; override; 
    procedure Assign(aSource: TPersistent); override; 
    procedure ReadComplex(aSerializer: TObject); override; 
    procedure WriteComplex(aSerializer: TObject); override; 
  published
    property Value: UnicodeString read fValue write fValue;
  end;

  WideString_AnonymousCollection = class(TROCollection)
  protected
    constructor Create(aItemClass: TCollectionItemClass); overload;
    function GetItems(aIndex: Integer): WideString_Anonymous;
    procedure SetItems(aIndex: Integer; const Value: WideString_Anonymous);
  public
    constructor Create; overload;
    function Add: WideString_Anonymous; reintroduce;
    property Items[Index: Integer]: WideString_Anonymous read GetItems write SetItems; default;
  end;

  IWebService = interface(IROService)
  ['{bcd2965a-8faf-4a4a-9fce-4efe2f163858}']
    function credit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): WideString_Anonymous;
    function order(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): UnicodeString;
    function auth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): UnicodeString;
  end;

  IWebService_Async = interface(IROAsyncInterface)
  ['{c0d83bbf-c816-4cd6-af6d-4acfd7687250}']
    procedure Invoke_credit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
    procedure Invoke_order(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
    procedure Invoke_auth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
    function Retrieve_credit: WideString_Anonymous;
    function Retrieve_order: UnicodeString;
    function Retrieve_auth: UnicodeString;
  end;

  IWebService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{174df8c2-d3ad-416f-8476-351e32b98b09}']
    function Begincredit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Beginorder(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Beginauth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Endcredit(const aRequest: IROAsyncRequest): WideString_Anonymous;
    function Endorder(const aRequest: IROAsyncRequest): UnicodeString;
    function Endauth(const aRequest: IROAsyncRequest): UnicodeString;
  end;

  CoWebService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IWebService; overload;
    class function Create(const aUri: TROUri): IWebService; overload;
    class function Create(const aUrl: String): IWebService; overload;
  end;

  CoWebService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IWebService_Async; overload;
    class function Create(const aUri: TROUri): IWebService_Async; overload;
    class function Create(const aUrl: String): IWebService_Async; overload;
  end;

  CoWebService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IWebService_AsyncEx; overload;
    class function Create(const aUri: TROUri): IWebService_AsyncEx; overload;
    class function Create(const aUrl: String): IWebService_AsyncEx; overload;
  end;

  TWebService_Proxy = class(TROProxy, IWebService)
  protected
    function __GetInterfaceName: String; override; 
    function credit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): WideString_Anonymous;
    function order(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): UnicodeString;
    function auth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): UnicodeString;
  end;

  TWebService_AsyncProxy = class(TROAsyncProxy, IWebService_Async)
  protected
    function __GetInterfaceName: String; override; 
    procedure Invoke_credit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
    procedure Invoke_order(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
    procedure Invoke_auth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
    function Retrieve_credit: WideString_Anonymous;
    function Retrieve_order: UnicodeString;
    function Retrieve_auth: UnicodeString;
  end;

  TWebService_AsyncProxyEx = class(TROAsyncProxyEx, IWebService_AsyncEx)
  protected
    function __GetInterfaceName: String; override; 
    function Begincredit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Beginorder(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Beginauth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function Endcredit(const aRequest: IROAsyncRequest): WideString_Anonymous;
    function Endorder(const aRequest: IROAsyncRequest): UnicodeString;
    function Endauth(const aRequest: IROAsyncRequest): UnicodeString;
  end;

implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function WideString_Anonymous.GetAttributeCount: Integer;
begin
  result := 3;
  exit;
end;

class function WideString_Anonymous.GetAttributeName(aIndex: Integer): String;
begin
  case aIndex of
    0: begin
        result := 'nillable';
        exit;
      end;
    1: begin
        result := 'anonymous';
        exit;
      end;
    2: begin
        result := 'issimpletypeextension';
        exit;
      end;
  end;
end;

class function WideString_Anonymous.GetAttributeValue(aIndex: Integer): String;
begin
  case aIndex of
    0: begin
        result := '1';
        exit;
      end;
    1: begin
        result := '1';
        exit;
      end;
    2: begin
        result := '1';
        exit;
      end;
  end;
end;

procedure WideString_Anonymous.Assign(aSource: TPersistent);
var
  lSource: WideString_Anonymous;
begin
  inherited Assign(aSource);
  if aSource.InheritsFrom(WideString_Anonymous) then begin
    lSource := WideString_Anonymous(aSource);

    Self.Value := lSource.Value;
  end;
end;

procedure WideString_Anonymous.ReadComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_Value: UnicodeString;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    l_Value := Self.Value;
    try
      __Serializer.ReadUnicodeString('Value', l_Value);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'Value']);
      end;
    end;
    Self.Value := l_Value;
  end
  else begin
    l_Value := Self.Value;
    try
      __Serializer.ReadUnicodeString('Value', l_Value);
    except
      on E: Exception do begin
        uROClasses.RaiseError('Exception "%s" with message "%s" happens during reading field "%s".', [E.ClassName(), E.Message, 'Value']);
      end;
    end;
    Self.Value := l_Value;
  end;
end;

procedure WideString_Anonymous.WriteComplex(aSerializer: TObject);
var
  __Serializer: TROSerializer;
  l_Value: UnicodeString;
begin
  __Serializer := TROSerializer(aSerializer);
  if __Serializer.RecordStrictOrder then begin
    __Serializer.ChangeClass(WideString_Anonymous);
    l_Value := Self.Value;
    __Serializer.WriteUnicodeString('Value', l_Value);
  end
  else begin
    l_Value := Self.Value;
    __Serializer.WriteUnicodeString('Value', l_Value);
  end;
end;

constructor WideString_AnonymousCollection.Create(aItemClass: TCollectionItemClass);
begin
  inherited Create(aItemClass);
end;

function WideString_AnonymousCollection.GetItems(aIndex: Integer): WideString_Anonymous;
begin
  result := WideString_Anonymous(inherited Items[aIndex]);
  exit;
end;

procedure WideString_AnonymousCollection.SetItems(aIndex: Integer; const Value: WideString_Anonymous);
var
  lvalue: WideString_Anonymous;
begin
  lvalue := WideString_Anonymous(inherited Items[aIndex]);
  lvalue.Assign(Value);
end;

constructor WideString_AnonymousCollection.Create;
begin
  inherited Create(WideString_Anonymous);
end;

function WideString_AnonymousCollection.Add: WideString_Anonymous;
begin
  result := WideString_Anonymous(inherited Add());
  exit;
end;

class function CoWebService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IWebService;
begin
  result := TWebService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoWebService.Create(const aUri: TROUri): IWebService;
begin
  result := TWebService_Proxy.Create(aUri);
  exit;
end;

class function CoWebService.Create(const aUrl: String): IWebService;
begin
  result := TWebService_Proxy.Create(aUrl);
  exit;
end;

class function CoWebService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IWebService_Async;
begin
  result := TWebService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoWebService_Async.Create(const aUri: TROUri): IWebService_Async;
begin
  result := TWebService_AsyncProxy.Create(aUri);
  exit;
end;

class function CoWebService_Async.Create(const aUrl: String): IWebService_Async;
begin
  result := TWebService_AsyncProxy.Create(aUrl);
  exit;
end;

class function CoWebService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IWebService_AsyncEx;
begin
  result := TWebService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoWebService_AsyncEx.Create(const aUri: TROUri): IWebService_AsyncEx;
begin
  result := TWebService_AsyncProxyEx.Create(aUri);
  exit;
end;

class function CoWebService_AsyncEx.Create(const aUrl: String): IWebService_AsyncEx;
begin
  result := TWebService_AsyncProxyEx.Create(aUrl);
  exit;
end;

function TWebService_Proxy.__GetInterfaceName: String;
begin
  result := 'WebService';
  exit;
end;

function TWebService_Proxy.credit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): WideString_Anonymous;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Anonymous;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['credit', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'credit', 'tns', 
                                             'document', 'SOAP', 'literal']);
  try
    lResult := nil;
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'credit');
    lMessage.Write('data', System.TypeInfo(UnicodeString), data, []);
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('creditResult', System.TypeInfo(WideString_Anonymous), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_Proxy.order(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['order', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'order', 'tns', 
                                             'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'order');
    lMessage.Write('data', System.TypeInfo(UnicodeString), data, []);
    lMessage.Write('id', System.TypeInfo(UnicodeString), id, []);
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('orderResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_Proxy.auth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['auth', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'auth', 'tns', 
                                             'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'auth');
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('authResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'WebService';
  exit;
end;

procedure TWebService_AsyncProxy.Invoke_credit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('credit');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['credit', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'credit', 
                                               'tns', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'credit');
    lMessage.Write('data', System.TypeInfo(UnicodeString), data, []);
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    __DispatchAsyncRequest('credit', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TWebService_AsyncProxy.Invoke_order(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('order');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['order', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'order', 'tns', 
                                               'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'order');
    lMessage.Write('data', System.TypeInfo(UnicodeString), data, []);
    lMessage.Write('id', System.TypeInfo(UnicodeString), id, []);
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    __DispatchAsyncRequest('order', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TWebService_AsyncProxy.Invoke_auth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('auth');

    lMessage.SetAttributes(lTransportChannel, ['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['auth', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'auth', 'tns', 
                                               'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'auth');
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    __DispatchAsyncRequest('auth', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TWebService_AsyncProxy.Retrieve_credit: WideString_Anonymous;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Anonymous;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    lResult := nil;
    __response := __RetrieveAsyncResponse('credit');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('creditResult', System.TypeInfo(WideString_Anonymous), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxy.Retrieve_order: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('order');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('orderResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxy.Retrieve_auth: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('auth');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('authResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'WebService';
  exit;
end;

function TWebService_AsyncProxyEx.Begincredit(const data: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['credit', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'credit', 'tns', 'document', 
                               'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'credit');
    lMessage.Write('data', System.TypeInfo(UnicodeString), data, []);
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxyEx.Beginorder(const data: UnicodeString; const id: UnicodeString; const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; 
                                             const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['order', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'order', 'tns', 'document', 
                               'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'order');
    lMessage.Write('data', System.TypeInfo(UnicodeString), data, []);
    lMessage.Write('id', System.TypeInfo(UnicodeString), id, []);
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxyEx.Beginauth(const db: UnicodeString; const login: UnicodeString; const password: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'inputchildrennamespace', 'location', 'outputchildrennamespace', 'remap_auth', 'remap_credit', 'remap_order', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['auth', '*', 'http://10.1.104.224:40284/soap/', '*', 'auth', 'credit', 'order', 'tns', 'auth', 'tns', 'document', 
                               'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'WebService', __InterfaceName, 'auth');
    lMessage.Write('db', System.TypeInfo(UnicodeString), db, []);
    lMessage.Write('login', System.TypeInfo(UnicodeString), login, []);
    lMessage.Write('password', System.TypeInfo(UnicodeString), password, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TWebService_AsyncProxyEx.Endcredit(const aRequest: IROAsyncRequest): WideString_Anonymous;
var
  lResult: WideString_Anonymous;
begin
  lResult := nil;
  aRequest.ReadResponse();
  aRequest.Message.Read('creditResult', System.TypeInfo(WideString_Anonymous), lResult, []);
  result := lResult;
  exit;
end;

function TWebService_AsyncProxyEx.Endorder(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('orderResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function TWebService_AsyncProxyEx.Endauth(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('authResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterROClass(WideString_Anonymous);
  RegisterProxyClass(IWebService_IID, TWebService_Proxy);
finalization
  UnregisterROClass(WideString_Anonymous);
  UnregisterProxyClass(IWebService_IID);
end.
